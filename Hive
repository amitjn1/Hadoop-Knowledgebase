#Hive Data Types --> Complex Types
Complex Types can be built up from primitive types and other composite types using:
Structs: the elements within the type can be accessed using the DOT (.) notation. For example, for a column c of type STRUCT {a INT; b INT} the a field is accessed by the expression c.a
Maps (key-value tuples): The elements are accessed using ['element name'] notation. For example in a map M comprising of a mapping from 'group' -> gid the gid value can be accessed using M['group']
Arrays (indexable lists): The elements in the array have to be in the same type. Elements can be accessed using the [n] notation where n is an index (zero-based) into the array. For example for an array A having the elements ['a', 'b', 'c'], A[1] retruns 'b'.
  in DDL for hive table with Array ==>  collection items terminated by '$' ==> corresponds to Array data type
Using the primitive types and the constructs for creating complex types, types with arbitrary levels of nesting can be created. For example, a type User may comprise of the following fields:
gender - which is a STRING.
active - which is a BOOLEAN.

# Hive command for detailed table desc
hive> describe formatted <tablename>;

#Hive show create table statement
hive> SHOW CREATE TABLE myTable;

#hive-site.xml stores location of hive meta store and hdfs
